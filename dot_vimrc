" -----------------------------------------
" PLUGINS
" -----------------------------------------
call plug#begin('~/.vim/plugged')

" File explorer
Plug 'mcchrish/nnn.vim'
" Status Bar
Plug 'itchyny/lightline.vim'
" Completion
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'
" Searching
Plug 'junegunn/fzf', { 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
" Code
Plug 'pearofducks/ansible-vim', { 'do': 'cd ./UltiSnips; ./generate.py' }
Plug 'TonyChG/MagicTemplate'
Plug 'tomtom/tcomment_vim'
" Indenting
Plug 'godlygeek/tabular'
Plug 'avakhov/vim-yaml'
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
" Swap panes with <leader <<> <leader <<>
Plug 'wesQ3/vim-windowswap'

call plug#end()


" -----------------------------------------
" GENERAL
" -----------------------------------------
" Set leader key as ,
let mapleader=","

" Set syntax colors
syntax on
set encoding=UTF-8

" Indent
set autoindent
set smartindent
set expandtab
set shiftwidth=4
set softtabstop=4
set laststatus=2

" Infos
set nonumber           " disable line numbers
set wildmenu           " visual autocomplete for command menu
set timeout            " for mappings
set timeoutlen=1000    " default value
set ttimeout           " for key codes
set ttimeoutlen=0      " unnoticeable small value

" set ignorecase
set smartcase
set backspace=2

" FZF
" Liste files using fzf
nnoremap <C-f> :Files<CR>
" TODO fix this
" https://www.chrisatmachine.com/Neovim/08-fzf/
let FZF_DEFAULT_COMMAND='fd -H -t f -E venv -E target -E .git'
" Liste les buffers vim
nnoremap <C-b> :Buffers<CR>
" Use ag to Fuzzy find in files
nnoremap <silent> <C-g> :Ag<CR>
" TODO upgrade to rg ?
" https://sidneyliebrand.io/blog/how-fzf-and-ripgrep-improved-my-workflowk

" Snippets (when help is displayed)
let g:UltiSnipsExpandTrigger = "<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-x>"
let g:UltiSnipsJumpBackwardTrigger="<c-c>"

" Helper for displaying whitespaces
set list listchars=tab:»·,trail:·

" Set settings for file types
filetype plugin on
filetype plugin indent on
autocmd BufNewFile,BufRead *.md set filetype=markdown
autocmd BufNewFile,BufRead Vagrantfile set filetype=ruby
autocmd FileType ruby setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" TODO Map qq to exit buffer from Documentation popup

" Navigate between splits using Ctrl Key
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" TODO key bind create splits
" More natural splits opening
set splitbelow
set splitright

" Navigate between Tabs
nnoremap tn  :tabnew<CR>
nnoremap th  :tabfirst<CR>
nnoremap tk  :tabnext<CR>
nnoremap tj  :tabprev<CR>
nnoremap tl  :tablast<CR>

" nnn : open nnn window in a split
let g:nnn#layout = { 'left': '~20%' } " or right, up, down
" nnn : open files (with Enter key) in different layouts
let g:nnn#action = {
      \ '<c-t>': 'tab split',
      \ '<c-u>': 'split',
      \ '<c-i>': 'vsplit' }

" TODO Yank



" -----------------------------------------
" STYLE
" -----------------------------------------
" Change auto-complete color
highlight Pmenu ctermbg=gray guibg=gray
" Color scheme
colorscheme monokai

" Status bas colorscheme
let g:lightline = { 'colorscheme': 'wombat'}



" -----------------------------------------
" USERFUL KEYBINDINGS
" -----------------------------------------
" CTRL-C : Quit insert mode, go back to Normal mode. Do not check for abbreviations. Does not trigger the InsertLeave autocommand event.
" TODO motion.txt
" TODO quickfixlist
"
"" VISUAL MODE : I majuscule pour insérer sur plusieurs colonnes

" tabnew | term

" vim qf
" vim fugitive
" ultisnips vim snippets
" jedi ?











" -----------------------------------------
" VIM COC
" -----------------------------------------

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>"
